import java.util.ArrayList;
import java.util.Scanner;



public class CoffeeGUI extends CoffeeShop {
    
    Scanner kbScanner = new Scanner(System.in);
    
    int select;

    private ArrayList<MenuItem> order = new ArrayList<MenuItem>();
    private ArrayList<Receipt> receipts = new ArrayList<Receipt>();
    


    // Create a method for selecting choices from a Menu
    public int select(int num) {
        int selection;
    
        do {
            selection = kbScanner.nextInt();
    
            if (selection > num || selection < 1) {
                System.out.println("Invalid selection. Please select again choosing a number corresponding to the choices");
            }
    
        } while (selection > num || selection < 1);
    
        return selection;
    }


    // Create Start and selecting options


        public void start(){



            System.out.println("Welcome to CoffeeGUI. Please make a selection below");
            System.out.println("1. Place an order");
            System.out.println("2. Access loyalty and members");
            System.out.println("3. Change and Update Menu");
            System.out.println("4. Check and Update BOH");
            System.out.println("5. Shutdown GUI");

            select = this.select(5);

            switch(select){
                case 1:
                this.startOrder();
                break;

                case 2:
                this.accessLoyalty();
                break;

                case 3:
                this.changeMenu();
                break;

                case 4:
                this.checkBOH();
                break;

                case 5:
                break;
            }

        }

        //GROUP
        private void startOrder() {

            System.out.println("Please select an option below");
            boolean done = false;

            while (!done){
                System.out.println("1. Espresso");
                System.out.println("2. Food");
                System.out.println("3. Place Order");
                System.out.println("4. Cancel Order");

                select = this.select(5);

                switch(select){
                    case 1:
                    this.placeEspresso();
                    break;

                    case 2:
                    this.placeFood();
                    break;

                    case 3:
                    done = true;
                    this.placeOrder();
                    break;

                    case 4:
                    done = true;
                    break;
                
                }

            
            }

            this.start();

        }


        private void placeFood(){

            System.out.println("What food would you like?");
            System.out.println("1. Donut");
            System.out.println("2. Muffin");
            System.out.println("3. Bagel");
            System.out.println("4. Cancel");

            select = this.select(4);
            switch(select){
                case 1:
                order.add(menu.get(7));
                break;

                case 2:
                order.add(menu.get(8));
                break;

                case 3:
                order.add(menu.get(9));
                break;

                case 4:
                break;
            }

        }


        private void placeEspresso(){


            ArrayList<Espresso> espMenu = new ArrayList<>();

                for (MenuItem item : menu) {
                    if (item instanceof Espresso && item.isOnCurrentMenu()) {
                        espMenu.add((Espresso)item);
                    }
                }



           System.out.println("What espresso item would you like to order?");

    // list the menu items
    for (int i = 0; i < espMenu.size(); i++) {
        Espresso item = espMenu.get(i);
                System.out.println((i + 1) + ". " + item.getName());
    }

    // add an option to cancel
    System.out.println((espMenu.size() + 1) + ". Other");
    System.out.println((espMenu.size() + 2) + ". Cancel");

    select = this.select(espMenu.size() + 2);

    // add the selected item to the order and deduct ingredients
    if (select <= espMenu.size()) {
        Espresso item = espMenu.get(select - 1);
        order.add(item);
        ingredients.get(0).use(item.getMilk());
        ingredients.get(1).use(item.getEspresso());
        this.addExtra();
        } else if (select == espMenu.size() + 1) {
            this.placeOther();
        }  

    }
                


            

        


        private void placeOther(){
            System.out.println("Please answer the following: What is the name of this order?");
            String customName = kbScanner.next();
            System.out.println("How many shots of espresso?");
            int espressoNum = kbScanner.nextInt();
            System.out.println("How many ounces of milk?");
            int milkNum = kbScanner.nextInt();
            System.out.println("For syrup, enter the name or NA");
            String syrupName = kbScanner.next();
            System.out.println("For base toppings, enter the name or NA");
            String baseTopping = kbScanner.next();
            System.out.println("For extra toppings, enter the name or NA");
            String extraTopping = kbScanner.next();

            double customPrice = 0;
            int milkInd = this.findIndexOf("WholeMilkOunces");
            customPrice += ingredients.get(milkInd).getCost(milkNum) * 2;
            ingredients.get(milkInd).use(milkNum);

            int esprInd = this.findIndexOf("Espresso");
            customPrice += ingredients.get(esprInd).getCost(espressoNum) * 1.5;
            ingredients.get(esprInd).use(espressoNum);
            
            if(!syrupName.equals("NA")){
                int syrInd = this.findIndexOf(syrupName);
                System.out.println("How many pumps of Syrup?");
                int syrNum = kbScanner.nextInt();
                customPrice += ingredients.get(syrInd).getCost(syrNum);
                ingredients.get(syrInd).use(syrNum);
            }
            
            if(!baseTopping.equals("NA")){
                int btInd = this.findIndexOf(baseTopping);
                customPrice += ingredients.get(btInd).getCost(1);
                ingredients.get(btInd).use(1);
            }

            if(!extraTopping.equals("NA")){
                int etInd = this.findIndexOf(extraTopping);
                customPrice += ingredients.get(etInd).getCost(1);
                ingredients.get(etInd).use(1);
            }

            MenuItem customItem = new MenuItem(customName, customPrice);
            order.add(customItem);

        }


        private void addExtra(){
            System.out.println("Would you like any of the following extras?");


            double extraPrice = 0;
            boolean done = false;
            while (!done){
            System.out.println("1. Syrup");
            System.out.println("2. Topping (cold foam, whipped cream)");
            System.out.println("3. Additive Toppings (sprinkles, powder)");
            System.out.println("4. Sweetener");
            System.out.println("5. Done/None");

            select = this.select(5);

            switch(select){
                    case 1:
                    System.out.println("Name which Syrup you would like to add");
                    System.out.println("Mocha, Caramel, Cancel"); 
                    String syrupName = kbScanner.next();
                    if(!syrupName.equals("Cancel")){                                               
                        int i = this.findIndexOf(syrupName);
                        System.out.println("How many Pumps?");
                        int pumps = kbScanner.nextInt();
                        extraPrice += ingredients.get(i).getCost(1) * pumps;
                        ingredients.get(i).use(1 * pumps);
                        }
                    break;

                    case 2:
                    System.out.println("Name which Topping you would like to add");
                    System.out.println("Cold foam, Sweet cream, Whipped cream, Cancel"); 
                    String toppingName = kbScanner.next();
                    if(!toppingName.equals("Cancel")){                                               
                        int i = this.findIndexOf(toppingName);
                        extraPrice += ingredients.get(i).getCost(1);
                        ingredients.get(i).use(1);
                        }
                    break;

                    case 3:
                    System.out.println("Name which Additive you would like to add");
                    System.out.println("Sprinkles, Cookie crumble, Caramel crunch, Cinnamon dolce, Cancel"); 
                    String eToppingName = kbScanner.next();
                    if(!eToppingName.equals("Cancel")){                                               
                        int i = this.findIndexOf(eToppingName);
                        extraPrice += ingredients.get(i).getCost(1);
                        ingredients.get(i).use(1);
                        }
                    break;

                    case 4:
                    System.out.println("Name which Sweetener you would like to add");
                    System.out.println("Sugar, Honey, Liquid cane, Artificial");
                    String sweetName = kbScanner.next();
                    if(!sweetName.equals("Cancel")){                                               
                        int i = this.findIndexOf(sweetName);
                        System.out.println("How many additions?");
                        int pumps = kbScanner.nextInt();
                        extraPrice += ingredients.get(i).getCost(1) * pumps;
                        ingredients.get(i).use(1 * pumps);
                        }
                    break;

                    case 5:
                    MenuItem extrasItem = new MenuItem("Extras", extraPrice);
                    order.add(extrasItem);
                    done = true;
                    break;
                        

                    
                }
            }
        }


        private void placeOrder(){

            
            double finalPrice = calculateTotalPrice(order);
            System.out.println("Your order is below:");
            for (MenuItem item: order) {
                System.out.println(item.getName()+ ": $" + item.getPrice());
            }
            


            System.out.println("Are you a rewards member?");
            System.out.println("1. Yes");
            System.out.println("2. No");
            select = this.select(2);

            switch(select){
                case 1:


                System.out.println("Enter phone number (no dashes or spaces):");
        	    String p = kbScanner.next();
                if (this.checkEmployee(p)){
                    finalPrice = finalPrice * .90;
                }
                boolean rewarded = this.hasReward(p);
                if (rewarded){ 
                    System.out.println("You have a reward, the highest priced item has been deducted");
                    double highestPrice = this.getHighestPrice(order);
                    finalPrice -= highestPrice;
                    System.out.println("Your total price is: $" + finalPrice);
                } else{
                    System.out.println("You have no rewards");
                    members.get(p).addPoints(finalPrice);
                System.out.println("Your total price is: $" + finalPrice);
                }
                break;

                case 2:
                System.out.println("Would you like to become a rewards member?");
                System.out.println("1. Yes");
                System.out.println("2. No");
                select = this.select(2);

                switch(select){
                    case 1:
                    System.out.println("Please enter your phone number (no dashes or spaces)");
                    String pn = kbScanner.next();
                    this.addmember(pn, finalPrice);
                    if (this.checkEmployee(pn)){
                        finalPrice = finalPrice * .90;
                    }
                    System.out.println("Your total price is: $" + finalPrice);
                    break;

                    case 2:
                    System.out.println("Your total price is: $" + finalPrice);
                    break;
                }
                break;
            }
                

                System.out.println("Thank you for coming!");
                storeRevenue += finalPrice;

                System.out.println("Receipt:");
                System.out.println("------------------------");
                for (MenuItem item : order) {
                    System.out.println(item.getName() + " - $" + item.getPrice());
                }
                System.out.println("------------------------");
                System.out.println("Total: $" + finalPrice);
                System.out.println();

                ArrayList<MenuItem> orderCopy = new ArrayList<>(order);
                Receipt receipt = new Receipt(orderCopy, finalPrice);
                receipts.add(receipt);
                order.clear();
            }


        

        private double calculateTotalPrice(ArrayList<MenuItem> order) {
            double totalPrice = 0;
            for (MenuItem item : order) {
                totalPrice += item.getPrice();
            }
            return totalPrice;
        }

        private double getHighestPrice(ArrayList<MenuItem> order) {
            double highestPrice = 0;
            for (MenuItem item : order) {
                if (item.getPrice() > highestPrice) {
                    highestPrice = item.getPrice();
                }
            }
            return highestPrice;
        }




        //GROUP
        private void changeMenu(){

            System.out.println("What would you like to change about our menu?");
            System.out.println("1. Add new espresso");
            System.out.println("2. Drop an espresso");
            System.out.println("3. Take a menuItem off-season or add it back");

            select = this.select(3);
                switch(select){

                    case 1:
                    this.newEspresso();
                    break;

                    case 2:
                    this.dropEspresso();
                    break;


                    case 3:
                    this.seasonChange();
                    break;
                    
                }

            this.start();
        }


        private void newEspresso(){

            System.out.println("What would you like to name the new Espresso");
            String newName = kbScanner.next();
            System.out.println("How many shots of espresso will it have?");
            int espressoAmount = kbScanner.nextInt();
            System.out.println("How many ounces of milk will it have?");
            int milkAmount = kbScanner.nextInt();
            System.out.println("What is the base price?");
            double basePrice = kbScanner.nextDouble();

            Espresso newEspresso = new Espresso(newName, basePrice, milkAmount, espressoAmount);
            menu.add(newEspresso);

            System.out.println("Thank you, " + newName + " has been added to the menu");
        }


        private void dropEspresso(){

            System.out.println("What is the name of the espresso you would like to drop?");
            String droppedItem = kbScanner.next();

            menu.remove(droppedItem);
            System.out.println(droppedItem + " has been dropped");


        }



        private void seasonChange(){

            System.out.println("What item would you like to rotate?");
            

            ArrayList<Espresso> espMenu = new ArrayList<>();

                for (MenuItem item : menu) {
                    if (item instanceof Espresso) {
                        espMenu.add((Espresso)item);
                    }
                }


            for (int i = 0; i < espMenu.size(); i++) {
                MenuItem item = espMenu.get(i);
                System.out.println((i + 1) + ". " + item.getName());
            }
        
            // add an option to cancel
            System.out.println((espMenu.size() + 1) + ". Cancel");
        
            select = this.select(espMenu.size() + 1);
        
            // rotate item
            if (select <= espMenu.size()) {
                MenuItem change = espMenu.get(select-1);
                change.rotateOnCurrentMenu();
            }
        }






        // JOHN BLAKE 
       private void accessLoyalty() {
            System.out.println("1. Add member");
            System.out.println("2. How many loyalty points do you have?");
            System.out.println("3. Are you a loyalty member?");
            System.out.println("4. Does customer have a reward?");

          select = this.select(4);

            switch(select){
                case 1: 
                this.addmember();
                break; 
                
                case 2:
                this.lookupPoints();
                break;
                
                case 3:
                this.isLoyaltyMem();
                break;
                    	
            	case 4:
            	this.hasReward();
            	break;
            }

            this.start();
        
        }

        public void addmember(){
        	
        	
        	System.out.println("Enter phone number (no dashes or spaces):");
        	String p = kbScanner.next();

            System.out.println("Are they an Employee? Y or N?");
            String isEmp = kbScanner.next();
            
            Boolean emp = false;
            
            if (isEmp.contains("Y")) {
                emp = true;
            } else {
                emp = false;
            }

        	

        	Member newMember = new Member(p, emp);
            members.put(p, newMember);
        	
        	System.out.println("New member added!");
        	System.out.println();
        	
        	this.start();
        	
        	
        	
        }
        
        
        //new member from lookup	    	
        public  void addmember(String p){ 	
        	
            
        	System.out.println("Are they an Employee? Y or N?");
            String isEmp = kbScanner.next();
            
            Boolean emp = false;
            
            if (isEmp.contains("Y")) {
                emp = true;
            } else {
                emp = false;
            }

        	

        	Member newMember = new Member(p, emp);
            members.put(p, newMember);
        	
        	System.out.println("New member added!");
        	System.out.println();
        	
        	this.start();
        	  	
        }
        
        //new member from purchase
        public  void addmember(String p, double purchaseAmount){ 	
        	
        	System.out.println("Are they an Employee? Y or N?");
            String isEmp = kbScanner.next();
            
            Boolean emp = false;
            
            if (isEmp.contains("Y")) {
                emp = true;
            } else {
                emp = false;
            }

        	

        	Member newMember = new Member(p, emp);
            members.put(p, newMember);

            
        	newMember.addPoints(purchaseAmount);
        	System.out.println("New member added! Continue with purchase");
        	System.out.println();        
           	  	
        }



        public  void lookupPoints(){
        	System.out.println("Enter phone number (no dashes or spaces):");
        	String p = kbScanner.next();
        	
        	if(members.containsKey(p)) {
        		Member customer = members.get(p);
                System.out.println("This customer has " + customer.getPoints() +" points");
        	} else {
        		System.out.println("This customer is not signed up for loyalty points.");
        		System.out.println("Would you like to join the loyalty program? (Y/N)");
        		
        		String s = kbScanner.next();
        		if (s.equalsIgnoreCase("Y")) {
            		
            		this.addmember(p);
            		 
            	} else if (s.equalsIgnoreCase("N")){
            		
            		System.out.print("Ok.");
            		
            		 
            	} else {
            		
            		System.out.println("invalid input.");
                	
            	}

        	}
        	
        	
      
      
        }
        
        
        public  void isLoyaltyMem() {
        	
        	System.out.println("Enter phone number (no dashes or spaces):");
        	String p = kbScanner.next();
        	
        	if(members.containsKey(p)) {
        		System.out.println("You are a loyalty member");
        	} else {
        		System.out.println("This customer is not signed up for loyalty points.");
        		System.out.println("Would you like to join the loyalty progrmam? (Y/N)");
        		
        		String s = kbScanner.next();
        		if (s.equalsIgnoreCase("Y")) {
            		
            		this.addmember(p);
            		 
            	} else if (s.equalsIgnoreCase("N")){
            		
            		System.out.print("Ok.");
            	}	
        	}
        	
        }
        	
        
        
        public void hasReward() {
        	System.out.println("Enter phone number (no dashes or spaces):");
        	String id = kbScanner.next();
        	
        	if (members.containsKey(id)) {
                Member customer = members.get(id); // get the points associated with the key 'id'
                int points = customer.getPoints();
                if (points >= 10) {
                    System.out.println("You have a reward!");
                } else {
                    System.out.println("You are " + (10 - points) + " points away from a reward.");
                }
            } else {
                System.out.println("Invalid input or not a member.");
            }
        }

        public boolean hasReward(String id) {
        	
           	if (members.containsKey(id)) {
                Member customer = members.get(id); // get the points associated with the key 'id'
                int points = customer.getPoints();
                
                if (points >= 10) {
                    return true;
                } else {
                    return false;
                }
            } else {
                System.out.println("Invalid input or not a member.");
                return false;
            }
        }

        private boolean checkEmployee(String pn){

            Member discountMember = members.get(pn);
            if (discountMember.checkEmployee()){
                return true;
            }
            else {
                return false;
            }

        }
        

        //JACK HALEY. Checking BOH
        private void checkBOH(){
            System.out.println("1. Update Current Inventory");
            System.out.println("2. Monitor Day Progress");
            System.out.println("3. Check Inventory");
        
            select = this.select(3);

            switch(select){ 
            case 1:
                this.updateInv();
            break;
                
            case 2:
            this.monitor();
            break;

            case 3:
                this.ingredientStatus(ingredients);
            break;
            }

            this.start();
        }

            // Option 1 for Checking BOH
            public void updateInv(){

                System.out.println("1. Add New Ingredient");
                System.out.println("2. Change Current Ingredient Limit");
                System.out.println("3. Drop Ingredient");

                select = this.select(3);

                switch(select){
                    case 1:
                    System.out.println("Please enter the following one at a time: ingredient name, cost, and limit");
                    String newName = kbScanner.next();
                    Ingredient newIngredient = new Ingredient(newName, kbScanner.nextDouble(), kbScanner.nextInt());
                    ingredients.add(newIngredient);
                    break;

                    case 2:
                    System.out.println("Please enter the name of the ingredient you would like to change the limit for and the new limit");
                    String name = kbScanner.next();
                    int i = findIndexOf(name);
                    ingredients.get(i).setLimit(kbScanner.nextInt());
                    break;

                    case 3:
                    System.out.println("Please enter the name of the ingredient you would like to drop");
                    String dropName = kbScanner.next();
                    int i2 = findIndexOf(dropName);
                    ingredients.remove(i2);
                    break;
                    
                }

            }

            private void monitor(){

                System.out.println("Would you like to:");
                System.out.println("1. Print reciepts");
                System.out.println("2. Check revenue and ingredients");

                select = this.select(2);
                switch(select){
            
                    case 1:
                    System.out.println("1. Print all reciepts");
                    System.out.println("2. Print a specific receipt");
                    select = this.select(2);
                        switch(select){
                            case 1:
                                this.printAllReciepts();
                            break;

                            case 2:
                                System.out.println("What reciept number would you like to print?");
                                select = kbScanner.nextInt()-1;
                            
                                if (select < 0 || select >= receipts.size()) {
                                    System.out.println("Invalid receipt number.");
                                } else {
                                    Receipt receipt = receipts.get(select);
                                    System.out.println("Receipt #" + (select + 1));
                                    System.out.println("------------------------");
                                    for(MenuItem item : receipt.getItems()) {
                                        System.out.println(item.getName() + " - $" + item.getPrice());
                                    }
                                System.out.println("------------------------");
                                System.out.println("Total: $" + receipt.getFinalPrice());
                            }
                            break;
                        
                        }
                    break;



                    case 2:
                System.out.println("Current Revenue of today: $" + storeRevenue);
                
                boolean hasLowIngredients = false;

                    for (Ingredient ingredient : ingredients) {
                        if (ingredient.getStatus().equals("Low Stock") || ingredient.getStatus().equals("Empty")) {
                            hasLowIngredients = true;
                            break;
                            }
                    }
                
                if (!hasLowIngredients){
                    System.out.println("No low Ingredients.");
                    System.out.println();
                }

                if (hasLowIngredients) {
                System.out.println("Currently low ingredients");
                
                for (Ingredient ingredient : ingredients) {
                    if (ingredient.getStatus().equals("Low Stock") || ingredient.getStatus().equals("Empty")) {
                    System.out.println(ingredient.getName() + " - " + ingredient.getStatus());
                    }
                }
                System.out.println("Would you like to replenish the ingredients?");
                System.out.println("1. Yes");
                System.out.println("2. No");

                select = this.select(2);
                switch(select){
                    case 1:
                    for (Ingredient ingredient : ingredients) {
                        if (ingredient.getStatus().equals("Low Stock") || ingredient.getStatus().equals("Empty")) {
                            double rCost = ingredient.replenish();
                            storeRevenue -= rCost;
                            
                        }
                    }

                    case 2:

                    break;
                }
                break;
                }
            }

            }


            private int findIndexOf(String ingName){
                int ingredientIndex = -1;
                 for (int i = 0; i < ingredients.size(); i++) {
                    if (ingredients.get(i).getName().equals(ingName)) {
                     ingredientIndex = i;
                    break;
                    }
                
                }
                return ingredientIndex;
            }







    // print out the current status of each ingredient

    
    public void ingredientStatus(ArrayList<Ingredient> ingredients){
        for (Ingredient i : ingredients) {
            System.out.println("Ingredient: " + i.getName());
            System.out.println("Status: " + i.getStatus());
            System.out.println("Cost: $" + i.getCost());
            System.out.println("Limit: " + i.getLimit());
            System.out.println("Amount: " + i.getAmount());
         }
    }

    //print all receipts

    public void printAllReciepts(){

        System.out.println("All receipts:");
        System.out.println("------------------------");

        for (int i = 0; i < receipts.size(); i++) {
            Receipt receipt = receipts.get(i);
            System.out.println("Receipt #" + (i+1));
            System.out.println("------------------------");
            for(MenuItem item : receipt.getItems()) {
                System.out.println(item.getName() + " - $" + item.getPrice());
            }
            System.out.println("------------------------");
            System.out.println("Total: $" + receipt.getFinalPrice());
            System.out.println();
        }

    }





}
