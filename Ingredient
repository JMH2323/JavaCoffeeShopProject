public class Ingredient {
    
    



    // Create variables included in ingredients
    
    private String name;
    private double cost;
    public String status;
    private int limit;
    private int amount;

    //Create a Gui Class

    CoffeeGUI gui = new CoffeeGUI();


    // Construct the class using the cost needed, stock limit, current amount, and setting the status to full
    
    public Ingredient(String n, double c, int a){
        
        this.name = n;
        this.cost = c;
        this.status = "Full";
        this.limit = a;
        this.amount = a;
    }



    
    // Create a way to access each of these variables

    public String getName(){
        return this.name;
    }   
    
    
    
    public String getStatus(){
        return this.status;

    }

    public double getCost(){
        return this.cost;

    }

    public double getCost(int amount){
        return this.cost * amount;
    }

    public int getLimit(){
        return this.limit;

    }

    public int getAmount(){
        return this.amount;

    }

    // Create ways to change variables

    public void setLimit(int newLimit){
        if (this.amount > newLimit) {
            System.out.println("Current stock is higher than limit being set.");
            System.out.println("Please decrease current stock before setting new limit");
        }
        else {
            this.limit = newLimit;
            System.out.println("Would you like to replenish this ingredient?");
            System.out.println("1. Yes");
            System.out.println("2. No");
            int select = gui.select(2);
            switch(select){
                case 1:
                this.replenish();
                break;

                case 2:
                this.status = this.calculateStatus(this.getAmount());
                break;

            }

        }


    }


    // Create depletion tree for ingredient stock status

    public void use(int amountUsed){

        if (amountUsed > this.amount){
            System.out.print("Not enough ingredients");
            return;
        }
        
        int newAmount = this.amount - amountUsed;
    String newStatus = calculateStatus(newAmount);

    if (!newStatus.equals(this.status)) {
        this.status = newStatus;
    }

    this.amount = newAmount;
}

private String calculateStatus(int amount) {
    if (amount == 0) {
        return "Empty";
    } else if (amount <= this.limit / 4) {
        return "Low Stock";
    } else if (amount <= this.limit / 2) {
        return "Half Stock";
    } else if (amount < this.limit) {
        return "High Stock";
    } else {
        return "Full";
    }
}



    public double replenish(){

        double price = ((this.limit - this.amount) * this.cost);

        System.out.println("Total cost for replenish to " + this.limit + " quantity is $" + price);
        System.out.println("Would you like to continue with the purchase?");
        System.out.println("1. Yes");
        System.out.println("2. No");

        int select = gui.select(2);
        
        switch(select){
            case 1:
            this.amount = this.limit;
            System.out.println("Purchase complete.");
            String newStatus = calculateStatus(this.amount);
                if (!newStatus.equals(this.status)) {
                this.status = newStatus;
                }
            return price;

            case 2:
            return 0;
            

        }
        return 0;
    }


}
